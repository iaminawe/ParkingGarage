// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum VehicleType {
  COMPACT
  STANDARD
  OVERSIZED
  MOTORCYCLE
  ELECTRIC
  HANDICAP
}

enum VehicleStatus {
  PARKED
  DEPARTED
  ACTIVE
  INACTIVE
}

enum SpotType {
  COMPACT
  STANDARD
  OVERSIZED
  ELECTRIC
  HANDICAP
  MOTORCYCLE
}

enum SpotStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
  OUT_OF_ORDER
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RateType {
  HOURLY
  DAILY
  MONTHLY
  SPECIAL
}

enum PaymentType {
  PARKING
  PENALTY
  SUBSCRIPTION
  REFUND
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAY
  APP_PAYMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  DISPUTED
}

enum NotificationType {
  PARKING_SESSION_STARTED
  PARKING_SESSION_ENDED
  PAYMENT_CONFIRMATION
  PAYMENT_FAILED
  ACCOUNT_CREATED
  EMAIL_VERIFICATION
  PASSWORD_RESET
  LOGIN_SECURITY_ALERT
  SPOT_AVAILABILITY
  RESERVATION_REMINDER
  MAINTENANCE_ALERT
  SYSTEM_ANNOUNCEMENT
  BILLING_REMINDER
  SUBSCRIPTION_EXPIRY
}

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
  CANCELLED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY_DIGEST
  WEEKLY_DIGEST
  NEVER
}

// Authentication Models (User Management System)
model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  passwordHash             String
  firstName                String?
  lastName                 String?
  role                     String    @default("USER") // USER, ADMIN, MANAGER, OPERATOR
  isActive                 Boolean   @default(true)
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLoginAt              DateTime?
  loginAttempts            Int       @default(0)
  lockoutUntil             DateTime?
  twoFactorSecret          String?
  isTwoFactorEnabled       Boolean   @default(false)
  twoFactorBackupCodes     String? // JSON array of backup codes
  lastPasswordChange       DateTime? @default(now())
  passwordChangeRequired   Boolean   @default(false)
  securityQuestionHash     String?
  securityAnswerHash       String?
  preferredLanguage        String    @default("en")
  timezone                 String    @default("UTC")
  phoneNumber              String?
  isPhoneVerified          Boolean   @default(false)
  phoneVerificationToken   String?
  phoneVerificationExpires DateTime?
  googleId                 String?   @unique
  githubId                 String?   @unique
  profileImageUrl          String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  vehicles                Vehicle[] // User can own multiple vehicles
  sessions                UserSession[]
  auditLogs               SecurityAuditLog[]
  devices                 UserDevice[]
  loginHistory            LoginHistory[]
  notifications           Notification[]
  discountCodes           DiscountCode[]
  discountUsages          DiscountUsage[]
  promotions              Promotion[]
  promotionUsages          PromotionUsage[]
  notificationPreferences NotificationPreference[]

  // Performance indexes
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([loginAttempts, lockoutUntil])
  @@index([googleId])
  @@index([githubId])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@map("users")
}

model UserSession {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique
  refreshToken      String?   @unique
  expiresAt         DateTime
  refreshExpiresAt  DateTime?
  isRevoked         Boolean   @default(false)
  deviceInfo        String? // User agent/device information
  deviceFingerprint String?
  ipAddress         String?
  geoLocation       String? // City, Country from IP
  lastActivityAt    DateTime  @default(now())
  sessionType       String    @default("WEB") // WEB, MOBILE, API
  csrfToken         String?
  revokedReason     String? // LOGOUT, SECURITY, EXPIRED, ADMIN
  revokedAt         DateTime?
  isSecure          Boolean   @default(false) // HTTPS connection
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  device UserDevice? @relation(fields: [deviceFingerprint], references: [fingerprint])

  // Performance indexes
  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([isRevoked])
  @@index([deviceFingerprint])
  @@index([ipAddress])
  @@index([lastActivityAt])
  @@index([userId, isRevoked, expiresAt])
  @@map("user_sessions")
}

model UserDevice {
  id                   String   @id @default(cuid())
  userId               String
  fingerprint          String   @unique // Device fingerprint hash
  name                 String? // User-assigned device name
  deviceType           String // DESKTOP, MOBILE, TABLET
  browser              String?
  operatingSystem      String?
  ipAddress            String?
  geoLocation          String?
  isTrusted            Boolean  @default(false)
  lastSeenAt           DateTime @default(now())
  firstSeenAt          DateTime @default(now())
  isActive             Boolean  @default(true)
  notificationSettings String? // JSON string for push notification preferences
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions     UserSession[]
  loginHistory LoginHistory[]

  // Performance indexes
  @@index([userId])
  @@index([fingerprint])
  @@index([isTrusted])
  @@index([isActive])
  @@index([lastSeenAt])
  @@index([userId, isActive])
  @@map("user_devices")
}

model LoginHistory {
  id            String   @id @default(cuid())
  userId        String
  deviceId      String?
  attemptType   String // SUCCESS, FAILED_PASSWORD, FAILED_2FA, BLOCKED
  ipAddress     String
  geoLocation   String?
  userAgent     String?
  failureReason String? // INVALID_PASSWORD, ACCOUNT_LOCKED, 2FA_REQUIRED, etc.
  isSuspicious  Boolean  @default(false)
  riskScore     Float? // 0.0 to 1.0 risk assessment
  metadata      String? // JSON string for additional context data
  createdAt     DateTime @default(now())

  // Relations
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  device UserDevice? @relation(fields: [deviceId], references: [id])

  // Performance indexes
  @@index([userId])
  @@index([attemptType])
  @@index([ipAddress])
  @@index([isSuspicious])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([ipAddress, createdAt])
  @@index([attemptType, createdAt])
  @@map("login_history")
}

model SecurityAuditLog {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String?
  action      String // LOGIN, LOGOUT, PASSWORD_CHANGE, 2FA_ENABLE, etc.
  category    String // AUTH, ACCOUNT, SECURITY, DATA_ACCESS
  severity    String // LOW, MEDIUM, HIGH, CRITICAL
  description String
  ipAddress   String?
  userAgent   String?
  metadata    String? // JSON string for additional context data
  riskLevel   String? // LOW, MEDIUM, HIGH, CRITICAL
  isAnomaly   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Performance indexes
  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([severity])
  @@index([createdAt])
  @@index([isAnomaly])
  @@index([riskLevel])
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([severity, createdAt])
  @@map("security_audit_logs")
}

// Parking Management Models (Core Business Logic)
model Garage {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  // Configuration
  totalFloors Int     @default(1)
  totalSpots  Int     @default(0)
  isActive    Boolean @default(true)

  // Operating hours (JSON stored as string)
  operatingHours String? // JSON: { open: "08:00", close: "22:00", timezone: "UTC" }

  // Relationships
  floors          Floor[]
  tickets         Ticket[]
  transactions    Transaction[]
  pricingRules    PricingRule[]
  discountCodes   DiscountCode[]
  promotions      Promotion[]
  surgeZones      SurgeZone[]
  demandForecasts DemandForecast[]
  pricingHistory  PricingHistory[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("garages")
}

model Floor {
  id          String  @id @default(cuid())
  garageId    String
  floorNumber Int
  description String?
  totalSpots  Int     @default(0)
  isActive    Boolean @default(true)

  // Relationships
  garage Garage        @relation(fields: [garageId], references: [id], onDelete: Cascade)
  spots  ParkingSpot[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([garageId, floorNumber])
  @@map("floors")
}

model ParkingSpot {
  id         String     @id @default(cuid())
  spotNumber String     @unique
  floorId    String
  level      Int
  section    String?
  spotType   SpotType   @default(STANDARD)
  status     SpotStatus @default(AVAILABLE)
  isActive   Boolean    @default(true)
  width      Float?
  length     Float?
  height     Float?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  floor           Floor            @relation(fields: [floorId], references: [id], onDelete: Cascade)
  vehicles        Vehicle[]        @relation("VehicleSpot")
  currentVehicles Vehicle[]        @relation("VehicleCurrentSpot")
  sessions        ParkingSession[]
  discountUsages  DiscountUsage[]
  promotionUsages  PromotionUsage[]
  pricingHistory  PricingHistory[]

  // Performance indexes
  @@index([spotNumber])
  @@index([status])
  @@index([spotType])
  @@index([level])
  @@index([isActive])
  @@index([floorId])
  // Composite indexes for common queries
  @@index([status, spotType])
  @@index([level, section])
  @@index([spotType, isActive])
  @@map("parking_spots")
}

model Vehicle {
  id            String        @id @default(cuid())
  licensePlate  String        @unique
  vehicleType   VehicleType   @default(STANDARD)
  rateType      RateType      @default(HOURLY)
  status        VehicleStatus @default(PARKED)
  spotId        String?
  currentSpotId String? // Current parking spot ID for active sessions
  ownerId       String? // References User.id when vehicle is owned by registered user
  ownerName     String?
  ownerEmail    String?
  ownerPhone    String?
  make          String?
  model         String?
  year          Int?
  color         String?
  checkInTime   DateTime      @default(now())
  checkOutTime  DateTime?
  isPaid        Boolean       @default(false)
  hourlyRate    Float         @default(5.0)
  totalAmount   Float         @default(0.0)
  amountPaid    Float         @default(0.0)
  notes         String?
  deletedAt     DateTime? // For soft deletes
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  sessions       ParkingSession[]
  spot           ParkingSpot?     @relation("VehicleSpot", fields: [spotId], references: [id])
  currentSpot    ParkingSpot?     @relation("VehicleCurrentSpot", fields: [currentSpotId], references: [id])
  owner          User?            @relation(fields: [ownerId], references: [id])
  payments       Payment[]
  discountUsages DiscountUsage[]
  promotionUsages PromotionUsage[]
  pricingHistory PricingHistory[]

  // Performance indexes
  @@index([licensePlate])
  @@index([spotId])
  @@index([ownerId])
  @@index([vehicleType])
  @@index([checkInTime])
  @@index([isPaid])
  @@index([createdAt])
  // Composite indexes for common query patterns
  @@index([spotId, isPaid])
  @@index([vehicleType, checkInTime])
  @@index([ownerId, checkInTime])
  @@index([checkInTime, checkOutTime])
  @@map("vehicles")
}

model ParkingSession {
  id            String        @id @default(cuid())
  vehicleId     String
  spotId        String
  startTime     DateTime      @default(now())
  endTime       DateTime?
  duration      Int? // Duration in minutes
  hourlyRate    Float         @default(5.0)
  totalAmount   Float         @default(0.0)
  amountPaid    Float         @default(0.0)
  isPaid        Boolean       @default(false)
  paymentMethod String? // CASH, CREDIT_CARD, DEBIT_CARD, MOBILE_PAY, APP_PAYMENT
  paymentTime   DateTime?
  status        SessionStatus @default(ACTIVE)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  vehicle        Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  spot           ParkingSpot      @relation(fields: [spotId], references: [id])
  payments       Payment[]
  discountUsages DiscountUsage[]
  promotionUsages PromotionUsage[]
  pricingHistory PricingHistory[]

  // Performance indexes
  @@index([vehicleId])
  @@index([spotId])
  @@index([startTime])
  @@index([endTime])
  @@index([status])
  @@index([isPaid])
  @@index([paymentTime])
  // Composite indexes for analytics and reporting
  @@index([startTime, endTime])
  @@index([status, isPaid])
  @@index([vehicleId, startTime])
  @@index([spotId, startTime])
  @@index([paymentTime, totalAmount])
  @@map("parking_sessions")
}

model Payment {
  id            String        @id @default(cuid())
  paymentNumber String        @unique @default(cuid())
  sessionId     String?
  vehicleId     String?
  amount        Float
  currency      String        @default("USD")
  paymentType   PaymentType   @default(PARKING)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String? // External payment processor transaction ID
  paymentDate   DateTime      @default(now())
  processedAt   DateTime?
  failureReason String?
  refundAmount  Float?        @default(0)
  refundedAt    DateTime?
  notes         String?
  deletedAt     DateTime? // For soft deletes
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  session ParkingSession? @relation(fields: [sessionId], references: [id])
  vehicle Vehicle?        @relation(fields: [vehicleId], references: [id])

  // Performance indexes
  @@index([paymentNumber])
  @@index([sessionId])
  @@index([vehicleId])
  @@index([status])
  @@index([paymentType])
  @@index([paymentDate])
  @@index([processedAt])
  @@index([createdAt])
  @@map("payments")
}

// Transaction Management Models
model Transaction {
  id               String    @id @default(cuid())
  garageId         String
  ticketId         String?
  transactionType  String // PARKING_FEE, PENALTY, REFUND, etc.
  amount           Float
  currency         String    @default("USD")
  status           String // PENDING, COMPLETED, FAILED, CANCELLED
  paymentMethod    String? // CASH, CREDIT_CARD, DEBIT_CARD, etc.
  paymentReference String? // External payment system reference
  description      String?
  metadata         String? // JSON for additional transaction data
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  garage Garage  @relation(fields: [garageId], references: [id])
  ticket Ticket? @relation(fields: [ticketId], references: [id])

  // Performance indexes
  @@index([garageId])
  @@index([ticketId])
  @@index([status])
  @@index([transactionType])
  @@index([createdAt])
  @@index([processedAt])
  @@map("transactions")
}

model Ticket {
  id             String    @id @default(cuid())
  garageId       String
  ticketNumber   String    @unique
  vehiclePlate   String
  spotNumber     String?
  entryTime      DateTime  @default(now())
  exitTime       DateTime?
  duration       Int? // Duration in minutes
  baseAmount     Float     @default(0.0)
  additionalFees Float     @default(0.0)
  totalAmount    Float     @default(0.0)
  paidAmount     Float     @default(0.0)
  status         String    @default("ACTIVE") // ACTIVE, PAID, LOST, CANCELLED
  paymentStatus  String    @default("UNPAID") // UNPAID, PARTIAL, PAID, REFUNDED
  lostTicketFee  Float     @default(0.0)
  isLostTicket   Boolean   @default(false)
  qrCode         String? // QR code for digital tickets
  barcodeData    String? // Barcode data for physical tickets
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  garage       Garage        @relation(fields: [garageId], references: [id])
  transactions Transaction[]

  // Performance indexes
  @@index([garageId])
  @@index([ticketNumber])
  @@index([vehiclePlate])
  @@index([status])
  @@index([paymentStatus])
  @@index([entryTime])
  @@index([exitTime])
  @@index([isLostTicket])
  @@map("tickets")
}

// Pricing and Promotion Models
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum MembershipTier {
  BASIC
  PREMIUM
  VIP
  CORPORATE
}

enum PricingRuleType {
  BASE_RATE
  SURGE_MULTIPLIER
  TIME_BASED
  OCCUPANCY_BASED
  EVENT_BASED
  SPOT_TYPE_PREMIUM
}

model PricingRule {
  id          String          @id @default(cuid())
  name        String
  type        PricingRuleType
  description String?
  conditions  String // JSON string for rule conditions
  action      String // JSON string for pricing action
  priority    Int             @default(0)
  isActive    Boolean         @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  garageId    String? // Optional: rule specific to a garage
  spotTypes   String? // JSON array of applicable spot types
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  garage  Garage?          @relation(fields: [garageId], references: [id])
  history PricingHistory[]

  // Performance indexes
  @@index([type])
  @@index([isActive])
  @@index([priority])
  @@index([validFrom, validUntil])
  @@index([garageId, isActive])
  @@map("pricing_rules")
}

model DiscountCode {
  id                  String       @id @default(cuid())
  code                String       @unique
  name                String?
  description         String?
  type                DiscountType
  value               Float
  minAmount           Float? // Minimum transaction amount to apply
  maxDiscount         Float? // Maximum discount amount for percentage discounts
  usageLimit          Int? // Maximum number of uses
  usedCount           Int          @default(0)
  perUserLimit        Int? // Maximum uses per user
  validFrom           DateTime
  validUntil          DateTime
  isActive            Boolean      @default(true)
  applicableSpotTypes String? // JSON array of applicable spot types
  membershipTiersOnly String? // JSON array of required membership tiers
  garageId            String? // Optional: code specific to a garage
  createdBy           String? // User ID who created the code
  metadata            String? // JSON for additional configuration
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  garage   Garage?          @relation(fields: [garageId], references: [id])
  creator  User?            @relation(fields: [createdBy], references: [id])
  usageLog DiscountUsage[]
  history  PricingHistory[]

  // Performance indexes
  @@index([code])
  @@index([isActive])
  @@index([validFrom, validUntil])
  @@index([type])
  @@index([garageId])
  @@index([usedCount, usageLimit])
  @@map("discount_codes")
}

model DiscountUsage {
  id             String   @id @default(cuid())
  discountCodeId String
  userId         String?
  sessionId      String?
  vehicleId      String?
  spotId         String?
  originalAmount Float
  discountAmount Float
  finalAmount    Float
  ipAddress      String?
  userAgent      String?
  metadata       String? // JSON for additional tracking data
  usedAt         DateTime @default(now())

  // Relations
  discountCode DiscountCode    @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  user         User?           @relation(fields: [userId], references: [id])
  session      ParkingSession? @relation(fields: [sessionId], references: [id])
  vehicle      Vehicle?        @relation(fields: [vehicleId], references: [id])
  spot         ParkingSpot?    @relation(fields: [spotId], references: [id])

  // Performance indexes
  @@index([discountCodeId])
  @@index([userId])
  @@index([sessionId])
  @@index([usedAt])
  @@index([discountCodeId, userId])
  @@map("discount_usage")
}

model MembershipBenefit {
  id                  String         @id @default(cuid())
  tier                MembershipTier @unique
  name                String
  description         String?
  discountPercent     Float          @default(0)
  priorityBooking     Boolean        @default(false)
  extendedGracePeriod Int            @default(5) // minutes
  freeHours           Float          @default(0) // free hours per month
  specialRates        String? // JSON object for spot type specific rates
  features            String? // JSON array of feature names
  maxReservations     Int? // Maximum concurrent reservations
  advanceBookingDays  Int? // How many days in advance can book
  isActive            Boolean        @default(true)
  sortOrder           Int            @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Performance indexes
  @@index([tier])
  @@index([isActive])
  @@index([sortOrder])
  @@map("membership_benefits")
}

model Promotion {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String // SURGE_REDUCTION, HAPPY_HOUR, EVENT_SPECIAL, etc.
  conditions      String // JSON string for promotion conditions
  discount        String // JSON string for discount configuration
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  priority        Int      @default(0)
  usageLimit      Int? // Maximum total uses
  usedCount       Int      @default(0)
  perUserLimit    Int? // Maximum uses per user
  garageId        String? // Optional: promotion specific to a garage
  applicableSpots String? // JSON array of applicable spot types
  targetAudience  String? // JSON object for targeting criteria
  createdBy       String? // User ID who created the promotion
  metadata        String? // JSON for additional configuration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  garage   Garage?          @relation(fields: [garageId], references: [id])
  creator  User?            @relation(fields: [createdBy], references: [id])
  usageLog PromotionUsage[]
  history  PricingHistory[]

  // Performance indexes
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([type])
  @@index([priority])
  @@index([garageId])
  @@index([usedCount, usageLimit])
  @@map("promotions")
}

model PromotionUsage {
  id          String   @id @default(cuid())
  promotionId String
  userId      String?
  sessionId   String?
  vehicleId   String?
  spotId      String?
  savings     Float
  metadata    String? // JSON for additional tracking data
  usedAt      DateTime @default(now())

  // Relations
  promotion Promotion       @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user      User?           @relation(fields: [userId], references: [id])
  session   ParkingSession? @relation(fields: [sessionId], references: [id])
  vehicle   Vehicle?        @relation(fields: [vehicleId], references: [id])
  spot      ParkingSpot?    @relation(fields: [spotId], references: [id])

  // Performance indexes
  @@index([promotionId])
  @@index([userId])
  @@index([sessionId])
  @@index([usedAt])
  @@index([promotionId, userId])
  @@map("promotion_usage")
}

model SurgeZone {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  floors             String // JSON array of floor numbers
  spotTypes          String // JSON array of applicable spot types
  currentMultiplier  Float    @default(1.0)
  maxMultiplier      Float    @default(3.0)
  occupancyThreshold Float    @default(0.8) // 80%
  peakHours          String? // JSON array of peak hour objects
  isActive           Boolean  @default(true)
  garageId           String? // Optional: zone specific to a garage
  priority           Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  garage  Garage?          @relation(fields: [garageId], references: [id])
  history PricingHistory[]

  // Performance indexes
  @@index([isActive])
  @@index([garageId])
  @@index([currentMultiplier])
  @@index([occupancyThreshold])
  @@map("surge_zones")
}

model DemandForecast {
  id                String    @id @default(cuid())
  hour              Int // 0-23
  dayOfWeek         Int // 0-6 (Sunday-Saturday)
  expectedOccupancy Float // 0.0-1.0
  surgeMultiplier   Float     @default(1.0)
  confidence        Float // 0.0-1.0
  spotType          SpotType?
  garageId          String?
  isActive          Boolean   @default(true)
  lastUpdated       DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  garage Garage? @relation(fields: [garageId], references: [id])

  @@unique([hour, dayOfWeek, spotType, garageId])
  // Performance indexes
  @@index([hour, dayOfWeek])
  @@index([spotType])
  @@index([garageId])
  @@index([isActive])
  @@index([expectedOccupancy])
  @@map("demand_forecasts")
}

model PricingHistory {
  id             String  @id @default(cuid())
  sessionId      String?
  vehicleId      String?
  spotId         String?
  garageId       String?
  ruleId         String? // Applied pricing rule
  discountCodeId String? // Applied discount code
  promotionId    String? // Applied promotion
  surgeZoneId    String? // Applied surge zone

  // Pricing breakdown
  baseRate             Float
  surgeMultiplier      Float  @default(1.0)
  surgeRate            Float
  membershipDiscount   Float  @default(0)
  discountCodeDiscount Float  @default(0)
  promotionDiscount    Float  @default(0)
  finalRate            Float
  estimatedAmount      Float?
  actualAmount         Float?

  // Context information
  spotType       SpotType?
  spotFeatures   String? // JSON array
  rateType       RateType?
  membershipTier MembershipTier?
  duration       Int? // minutes
  checkInTime    DateTime
  checkOutTime   DateTime?

  // Metadata
  calculationData String? // JSON object with full calculation details
  appliedRules    String? // JSON array of all applied rules
  metadata        String? // Additional tracking data
  createdAt       DateTime @default(now())

  // Relations
  session      ParkingSession? @relation(fields: [sessionId], references: [id])
  vehicle      Vehicle?        @relation(fields: [vehicleId], references: [id])
  spot         ParkingSpot?    @relation(fields: [spotId], references: [id])
  garage       Garage?         @relation(fields: [garageId], references: [id])
  rule         PricingRule?    @relation(fields: [ruleId], references: [id])
  discountCode DiscountCode?   @relation(fields: [discountCodeId], references: [id])
  promotion    Promotion?      @relation(fields: [promotionId], references: [id])
  surgeZone    SurgeZone?      @relation(fields: [surgeZoneId], references: [id])

  // Performance indexes
  @@index([sessionId])
  @@index([vehicleId])
  @@index([spotId])
  @@index([garageId])
  @@index([checkInTime])
  @@index([spotType])
  @@index([membershipTier])
  @@index([ruleId])
  @@index([discountCodeId])
  @@index([createdAt])
  @@index([checkInTime, spotType])
  @@index([garageId, checkInTime])
  @@map("pricing_history")
}

// Configuration and Security Models
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique // VERIFICATION, RESET_PASSWORD, 2FA_ENABLED, etc.
  subject     String
  htmlContent String
  textContent String
  variables   String? // JSON string for template variables schema
  isActive    Boolean  @default(true)
  language    String   @default("en")
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Performance indexes
  @@index([name])
  @@index([isActive])
  @@index([language])
  @@map("email_templates")
}

model SecuritySettings {
  id                  String   @id @default(cuid())
  key                 String   @unique
  value               String
  dataType            String // STRING, NUMBER, BOOLEAN, JSON
  category            String // AUTH, SESSION, SECURITY, EMAIL
  description         String?
  isEditable          Boolean  @default(true)
  environmentSpecific Boolean  @default(false)
  lastModifiedBy      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Performance indexes
  @@index([key])
  @@index([category])
  @@index([environmentSpecific])
  @@map("security_settings")
}

// Notification System Models
model Notification {
  id           String               @id @default(cuid())
  userId       String
  type         NotificationType
  channel      NotificationChannel
  status       NotificationStatus   @default(PENDING)
  priority     NotificationPriority @default(MEDIUM)
  subject      String
  content      String
  metadata     String? // JSON for additional notification data
  readAt       DateTime?
  sentAt       DateTime?
  deliveredAt  DateTime?
  failedAt     DateTime?
  errorMessage String?
  retryCount   Int                  @default(0)
  maxRetries   Int                  @default(3)
  scheduleAt   DateTime? // For scheduled notifications
  expiresAt    DateTime? // For notifications that should expire
  templateId   String? // Reference to NotificationTemplate
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // Relations
  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  template NotificationTemplate? @relation(fields: [templateId], references: [id])
  logs     NotificationLog[]

  // Performance indexes
  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([sentAt])
  @@index([scheduleAt])
  @@index([expiresAt])
  // Composite indexes for common queries
  @@index([userId, status])
  @@index([userId, channel])
  @@index([type, channel])
  @@index([status, retryCount])
  @@index([scheduleAt, status])
  @@index([channel, priority, status])
  @@map("notifications")
}

model NotificationTemplate {
  id          String              @id @default(cuid())
  name        String              @unique
  type        NotificationType
  channel     NotificationChannel
  subject     String
  body        String
  variables   String? // JSON schema for template variables
  isActive    Boolean             @default(true)
  language    String              @default("en")
  version     Int                 @default(1)
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  notifications Notification[]

  // Performance indexes
  @@index([name])
  @@index([type])
  @@index([channel])
  @@index([isActive])
  @@index([language])
  // Composite indexes for template lookup
  @@index([type, channel])
  @@index([type, channel, language])
  @@index([isActive, type, channel])
  @@map("notification_templates")
}

model NotificationPreference {
  id                String                @id @default(cuid())
  userId            String
  channel           NotificationChannel
  enabled           Boolean               @default(true)
  quietHoursStart   String? // Time in HH:MM format
  quietHoursEnd     String? // Time in HH:MM format
  timezone          String                @default("UTC")
  frequency         NotificationFrequency @default(IMMEDIATE)
  categories        String? // JSON array of notification types user wants to receive
  metadata          String? // JSON for additional preference data
  doNotDisturbUntil DateTime? // Temporary do not disturb
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, channel])
  // Performance indexes
  @@index([userId])
  @@index([channel])
  @@index([enabled])
  @@index([frequency])
  // Composite indexes for preference lookup
  @@index([userId, enabled])
  @@index([userId, channel, enabled])
  @@map("notification_preferences")
}

model NotificationLog {
  id             String             @id @default(cuid())
  notificationId String
  status         NotificationStatus
  timestamp      DateTime           @default(now())
  details        String? // JSON for additional log details
  error          String? // Error message if failed
  retryAttempt   Int? // Which retry attempt this was
  processingTime Int? // Processing time in milliseconds
  externalId     String? // External service ID (email provider, SMS provider, etc.)
  metadata       String? // JSON for additional metadata

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([notificationId])
  @@index([status])
  @@index([timestamp])
  // Composite indexes for log analysis
  @@index([notificationId, timestamp])
  @@index([status, timestamp])
  @@index([retryAttempt, timestamp])
  @@map("notification_logs")
}
