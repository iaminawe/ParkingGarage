/**\n * Tests for logger configuration and functionality\n * \n * @module LoggerTests\n */\n\nimport { \n  StructuredLogger, \n  extractRequestContext, \n  generateCorrelationId,\n  LogLevel,\n  ConsoleLogger,\n  NoopLogger,\n  createLogger\n} from '../../src/config/logger.config';\nimport { Request } from 'express';\n\n// Mock environment for testing\nconst originalEnv = process.env;\nbeforeEach(() => {\n  jest.resetModules();\n  process.env = { ...originalEnv };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('StructuredLogger', () => {\n  let logger: StructuredLogger;\n  let consoleSpy: jest.SpyInstance;\n  \n  beforeEach(() => {\n    logger = new StructuredLogger();\n    consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n  });\n  \n  afterEach(() => {\n    consoleSpy.mockRestore();\n  });\n  \n  describe('constructor', () => {\n    it('should create logger without context', () => {\n      const logger = new StructuredLogger();\n      expect(logger).toBeInstanceOf(StructuredLogger);\n    });\n    \n    it('should create logger with context', () => {\n      const context = {\n        correlationId: 'test-123',\n        userId: 'user-456',\n        method: 'GET',\n        url: '/api/test',\n      };\n      \n      const logger = new StructuredLogger(context);\n      expect(logger).toBeInstanceOf(StructuredLogger);\n    });\n  });\n  \n  describe('error logging', () => {\n    it('should log error message', () => {\n      const error = new Error('Test error');\n      logger.error('Something went wrong', error);\n      \n      // Verify console.error was called\n      expect(console.error).toHaveBeenCalled();\n    });\n    \n    it('should log error with metadata', () => {\n      const error = new Error('Test error');\n      const meta = { userId: '123', operation: 'test' };\n      \n      logger.error('Operation failed', error, meta);\n      \n      expect(console.error).toHaveBeenCalled();\n    });\n    \n    it('should handle error without Error object', () => {\n      logger.error('Simple error message');\n      expect(console.error).toHaveBeenCalled();\n    });\n  });\n  \n  describe('info logging', () => {\n    it('should log info message', () => {\n      logger.info('Information message');\n      expect(console.log).toHaveBeenCalled();\n    });\n    \n    it('should log info with metadata', () => {\n      const meta = { requestId: '123', endpoint: '/api/test' };\n      logger.info('Request processed', meta);\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n  \n  describe('warn logging', () => {\n    it('should log warning message', () => {\n      const warnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      \n      logger.warn('Warning message');\n      expect(console.warn).toHaveBeenCalled();\n      \n      warnSpy.mockRestore();\n    });\n  });\n  \n  describe('debug logging', () => {\n    it('should log debug message', () => {\n      logger.debug('Debug information');\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n  \n  describe('http logging', () => {\n    it('should log HTTP message', () => {\n      logger.http('HTTP request logged');\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n  \n  describe('performance logging', () => {\n    it('should log performance metrics', () => {\n      const writeSpy = jest.fn();\n      \n      // Mock the performance file transport\n      jest.doMock('../../src/config/logger.config', () => ({\n        ...jest.requireActual('../../src/config/logger.config'),\n        performanceFileTransport: {\n          write: writeSpy\n        }\n      }));\n      \n      logger.performance('database.query', 150, { query: 'SELECT *' });\n      \n      // Verify performance was logged\n      expect(writeSpy).toHaveBeenCalled();\n    });\n  });\n  \n  describe('child logger', () => {\n    it('should create child logger with additional context', () => {\n      const parentContext = { correlationId: 'parent-123' };\n      const parentLogger = new StructuredLogger(parentContext);\n      \n      const childContext = { userId: 'user-456', operation: 'test' };\n      const childLogger = parentLogger.child(childContext);\n      \n      expect(childLogger).toBeInstanceOf(StructuredLogger);\n      \n      // Child should have both parent and additional context\n      childLogger.info('Test message');\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n  \n  describe('setCorrelationId', () => {\n    it('should set correlation ID', () => {\n      const result = logger.setCorrelationId('test-correlation-123');\n      expect(result).toBe(logger); // Should return self for chaining\n      \n      logger.info('Test with correlation ID');\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n  \n  describe('setUserId', () => {\n    it('should set user ID', () => {\n      const result = logger.setUserId('user-789');\n      expect(result).toBe(logger); // Should return self for chaining\n      \n      logger.info('Test with user ID');\n      expect(console.log).toHaveBeenCalled();\n    });\n  });\n});\n\ndescribe('ConsoleLogger', () => {\n  let logger: ConsoleLogger;\n  let consoleSpy: jest.SpyInstance;\n  \n  beforeEach(() => {\n    logger = new ConsoleLogger('TestLogger', LogLevel.DEBUG);\n    consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n  });\n  \n  afterEach(() => {\n    consoleSpy.mockRestore();\n  });\n  \n  describe('log levels', () => {\n    it('should log debug messages when level is DEBUG', () => {\n      logger.debug('Debug message');\n      expect(console.log).toHaveBeenCalled();\n    });\n    \n    it('should not log debug messages when level is INFO', () => {\n      const infoLogger = new ConsoleLogger('TestLogger', LogLevel.INFO);\n      infoLogger.debug('Debug message');\n      expect(console.log).not.toHaveBeenCalled();\n    });\n    \n    it('should log info messages when level is INFO or lower', () => {\n      logger.info('Info message');\n      expect(console.log).toHaveBeenCalled();\n    });\n    \n    it('should log warning messages', () => {\n      const warnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      logger.warn('Warning message');\n      expect(console.warn).toHaveBeenCalled();\n      warnSpy.mockRestore();\n    });\n    \n    it('should log error messages', () => {\n      const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n      const error = new Error('Test error');\n      logger.error('Error message', error);\n      expect(console.error).toHaveBeenCalled();\n      errorSpy.mockRestore();\n    });\n  });\n  \n  describe('metadata logging', () => {\n    it('should include metadata in log output', () => {\n      const meta = { userId: '123', operation: 'test' };\n      logger.info('Message with metadata', meta);\n      \n      expect(console.log).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('Meta: {');\n    });\n    \n    it('should include error stack trace', () => {\n      const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n      const error = new Error('Test error');\n      \n      logger.error('Error with stack', error);\n      \n      expect(console.error).toHaveBeenCalled();\n      const errorCall = errorSpy.mock.calls[0][0];\n      expect(errorCall).toContain('Stack:');\n      \n      errorSpy.mockRestore();\n    });\n  });\n});\n\ndescribe('NoopLogger', () => {\n  let logger: NoopLogger;\n  \n  beforeEach(() => {\n    logger = new NoopLogger();\n  });\n  \n  it('should not log anything', () => {\n    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n    const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    logger.debug('Debug message');\n    logger.info('Info message');\n    logger.warn('Warning message');\n    logger.error('Error message');\n    \n    expect(console.log).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    \n    consoleSpy.mockRestore();\n    errorSpy.mockRestore();\n  });\n});\n\ndescribe('createLogger', () => {\n  it('should create NoopLogger in test environment', () => {\n    process.env.NODE_ENV = 'test';\n    \n    const logger = createLogger('TestLogger');\n    expect(logger).toBeInstanceOf(NoopLogger);\n  });\n  \n  it('should create ConsoleLogger in development', () => {\n    process.env.NODE_ENV = 'development';\n    delete process.env.LOG_LEVEL;\n    \n    const logger = createLogger('TestLogger');\n    expect(logger).toBeInstanceOf(ConsoleLogger);\n  });\n  \n  it('should create ConsoleLogger in production', () => {\n    process.env.NODE_ENV = 'production';\n    delete process.env.LOG_LEVEL;\n    \n    const logger = createLogger('TestLogger');\n    expect(logger).toBeInstanceOf(ConsoleLogger);\n  });\n  \n  it('should respect LOG_LEVEL environment variable', () => {\n    process.env.NODE_ENV = 'development';\n    process.env.LOG_LEVEL = 'ERROR';\n    \n    const logger = createLogger('TestLogger');\n    expect(logger).toBeInstanceOf(ConsoleLogger);\n  });\n});\n\ndescribe('extractRequestContext', () => {\n  it('should extract context from Express request', () => {\n    const mockRequest = {\n      headers: {\n        'x-correlation-id': 'test-correlation-123',\n        'user-agent': 'Test Agent/1.0'\n      },\n      method: 'POST',\n      url: '/api/test',\n      ip: '127.0.0.1',\n      user: { id: 'user-456' },\n      get: (header: string) => mockRequest.headers[header.toLowerCase()]\n    } as any as Request;\n    \n    const context = extractRequestContext(mockRequest);\n    \n    expect(context).toEqual({\n      correlationId: 'test-correlation-123',\n      userId: 'user-456',\n      method: 'POST',\n      url: '/api/test',\n      ip: '127.0.0.1',\n      userAgent: 'Test Agent/1.0'\n    });\n  });\n  \n  it('should generate correlation ID if not provided', () => {\n    const mockRequest = {\n      headers: {},\n      method: 'GET',\n      url: '/api/health',\n      ip: '192.168.1.1',\n      connection: { remoteAddress: '192.168.1.1' },\n      get: jest.fn().mockReturnValue(undefined)\n    } as any as Request;\n    \n    const context = extractRequestContext(mockRequest);\n    \n    expect(context.correlationId).toBeDefined();\n    expect(context.correlationId).toMatch(/^\\d+-[a-z0-9]+$/);\n    expect(context.method).toBe('GET');\n    expect(context.url).toBe('/api/health');\n  });\n  \n  it('should handle request without user', () => {\n    const mockRequest = {\n      headers: {},\n      method: 'GET',\n      url: '/public',\n      ip: '10.0.0.1',\n      get: jest.fn().mockReturnValue(undefined)\n    } as any as Request;\n    \n    const context = extractRequestContext(mockRequest);\n    \n    expect(context.userId).toBeUndefined();\n    expect(context.method).toBe('GET');\n  });\n  \n  it('should use connection remote address as fallback for IP', () => {\n    const mockRequest = {\n      headers: {},\n      method: 'GET',\n      url: '/test',\n      ip: undefined,\n      connection: { remoteAddress: '203.0.113.1' },\n      get: jest.fn().mockReturnValue(undefined)\n    } as any as Request;\n    \n    const context = extractRequestContext(mockRequest);\n    \n    expect(context.ip).toBe('203.0.113.1');\n  });\n});\n\ndescribe('generateCorrelationId', () => {\n  it('should generate unique correlation IDs', () => {\n    const id1 = generateCorrelationId();\n    const id2 = generateCorrelationId();\n    \n    expect(id1).not.toBe(id2);\n    expect(id1).toMatch(/^\\d+-[a-z0-9]+$/);\n    expect(id2).toMatch(/^\\d+-[a-z0-9]+$/);\n  });\n  \n  it('should generate IDs with timestamp prefix', () => {\n    const beforeTimestamp = Date.now();\n    const id = generateCorrelationId();\n    const afterTimestamp = Date.now();\n    \n    const timestampPart = parseInt(id.split('-')[0]);\n    expect(timestampPart).toBeGreaterThanOrEqual(beforeTimestamp);\n    expect(timestampPart).toBeLessThanOrEqual(afterTimestamp);\n  });\n});\n\ndescribe('LogLevel enum', () => {\n  it('should have correct log level values', () => {\n    expect(LogLevel.DEBUG).toBe(0);\n    expect(LogLevel.INFO).toBe(1);\n    expect(LogLevel.WARN).toBe(2);\n    expect(LogLevel.ERROR).toBe(3);\n  });\n});\n\ndescribe('Integration tests', () => {\n  it('should work together for request logging flow', () => {\n    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n    \n    // Simulate a request flow\n    const mockRequest = {\n      headers: { 'user-agent': 'Test/1.0' },\n      method: 'POST',\n      url: '/api/users',\n      ip: '127.0.0.1',\n      user: { id: 'user-123' },\n      get: (header: string) => mockRequest.headers[header.toLowerCase()]\n    } as any as Request;\n    \n    // Extract context\n    const context = extractRequestContext(mockRequest);\n    \n    // Create logger with context\n    const logger = new StructuredLogger(context);\n    \n    // Log request\n    logger.info('Processing user creation request', {\n      requestBody: { name: 'John Doe' },\n      validation: 'passed'\n    });\n    \n    // Log success\n    logger.info('User created successfully', {\n      userId: 'new-user-456',\n      duration: 150\n    });\n    \n    expect(console.log).toHaveBeenCalledTimes(2);\n    \n    consoleSpy.mockRestore();\n  });\n  \n  it('should handle error logging with full context', () => {\n    const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    const context = {\n      correlationId: 'error-test-123',\n      userId: 'user-789',\n      method: 'DELETE',\n      url: '/api/users/123'\n    };\n    \n    const logger = new StructuredLogger(context);\n    const error = new Error('User not found');\n    \n    logger.error('Failed to delete user', error, {\n      targetUserId: '123',\n      operation: 'delete_user'\n    });\n    \n    expect(console.error).toHaveBeenCalled();\n    \n    errorSpy.mockRestore();\n  });\n});