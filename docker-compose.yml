version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: parkinggarage-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:/app/data/parkinggarage.db
      - PORT=3000
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - nginx
    networks:
      - parkinggarage-network

  nginx:
    image: nginx:alpine
    container_name: parkinggarage-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - parkinggarage-network

  backup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: parkinggarage-backup
    environment:
      - NODE_ENV=production
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups
      - ./logs:/app/logs:ro
    command: >
      sh -c "
        echo 'Setting up backup schedule...' &&
        crond -f &
        echo '0 2 * * * /app/scripts/backup.sh' | crontab - &&
        echo 'Backup service started. Running initial backup...' &&
        /app/scripts/backup.sh &&
        echo 'Initial backup completed. Waiting for scheduled backups...' &&
        tail -f /var/log/cron.log
      "
    restart: unless-stopped
    networks:
      - parkinggarage-network

  monitoring:
    image: prom/node-exporter:latest
    container_name: parkinggarage-monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - parkinggarage-network

  healthcheck:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: parkinggarage-healthcheck
    environment:
      - NODE_ENV=production
      - HEALTH_CHECK_URL=http://app:3000
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Setting up health monitoring...' &&
        crond -f &
        echo '*/5 * * * * /app/scripts/health-check.sh --silent' | crontab - &&
        echo 'Health monitoring started.' &&
        tail -f /app/logs/health.log
      "
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - parkinggarage-network

volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind
  
  app_backups:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/backups
      o: bind

networks:
  parkinggarage-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

services:
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: parkinggarage-app-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:/app/data/parkinggarage.db
      - PORT=3000
      - DEBUG=*
    volumes:
      - .:/app
      - /app/node_modules
      - ./data:/app/data
      - ./logs:/app/logs
    command: npm run dev
    restart: unless-stopped
    networks:
      - parkinggarage-network

  # Database GUI for development
  sqlite-web:
    image: coleifer/sqlite-web
    container_name: parkinggarage-sqlite-web
    ports:
      - "8080:8080"
    volumes:
      - ./data:/data
    command: sqlite_web -H 0.0.0.0 -p 8080 /data/parkinggarage.db
    depends_on:
      - app-dev
    restart: unless-stopped
    networks:
      - parkinggarage-network