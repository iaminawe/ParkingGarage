{
  "info": {
    "name": "Parking Garage API",
    "description": "Complete collection of API endpoints for the Parking Garage Management System. This collection includes all CRUD operations for vehicle check-in/check-out, spot management, garage configuration, and analytics.\n\n## Quick Start\n1. Import this collection into Postman\n2. Import the accompanying environment file\n3. Start with the 'Health Check' request to verify API availability\n4. Initialize garage using 'Initialize Garage' request\n5. Test vehicle operations with 'Check-in Vehicle' and 'Check-out Vehicle'\n\n## Collection Structure\n- **System**: Health checks and system information\n- **Garage Management**: Initialize and configure garage\n- **Vehicle Operations**: Check-in, check-out, and simulations\n- **Spot Management**: Query and manage parking spots\n- **Vehicle Management**: Track parked vehicles\n- **Analytics**: Occupancy and revenue statistics\n\n## Environment Variables\nMake sure to set up the following variables:\n- `baseUrl`: API base URL (e.g., http://localhost:3000/api)\n- `licensePlate`: Test license plate for vehicle operations\n- `spotId`: Test spot ID for spot operations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "parking-garage-api-v1",
    "_exporter_id": "parking-garage-system"
  },
  "item": [
    {
      "name": "System",
      "description": "System health and status endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check API health status and system information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});",
                  "",
                  "pm.test('Response time is less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Garage Management",
      "description": "Garage initialization and configuration endpoints",
      "item": [
        {
          "name": "Initialize Garage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Downtown Parking Garage\",\n  \"floors\": [\n    {\n      \"number\": 1,\n      \"bays\": 3,\n      \"spotsPerBay\": 10\n    },\n    {\n      \"number\": 2,\n      \"bays\": 3,\n      \"spotsPerBay\": 10\n    },\n    {\n      \"number\": 3,\n      \"bays\": 2,\n      \"spotsPerBay\": 8\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/garage",
              "host": ["{{baseUrl}}"],
              "path": ["garage"]
            },
            "description": "Initialize a new parking garage with floors, bays, and spots"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Garage is initialized', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('garage');",
                  "    pm.expect(jsonData).to.have.property('spotsCreated');",
                  "    pm.expect(jsonData.spotsCreated).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Garage Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/garage?includeStats=true&includeSpots=false",
              "host": ["{{baseUrl}}"],
              "path": ["garage"],
              "query": [
                {
                  "key": "includeStats",
                  "value": "true",
                  "description": "Include occupancy statistics"
                },
                {
                  "key": "includeSpots",
                  "value": "false",
                  "description": "Include detailed spot information"
                }
              ]
            },
            "description": "Retrieve current garage configuration with optional statistics"
          },
          "response": []
        },
        {
          "name": "Update Garage Rates",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"standard\": 6.00,\n  \"compact\": 5.00,\n  \"oversized\": 8.00,\n  \"ev_charging\": 3.50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/garage/rates",
              "host": ["{{baseUrl}}"],
              "path": ["garage", "rates"]
            },
            "description": "Update hourly rates for different spot types"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Vehicle Operations",
      "description": "Vehicle check-in, check-out, and simulation endpoints",
      "item": [
        {
          "name": "Check-in Vehicle",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licensePlate\": \"{{licensePlate}}\",\n  \"vehicleType\": \"standard\",\n  \"rateType\": \"hourly\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkin",
              "host": ["{{baseUrl}}"],
              "path": ["checkin"]
            },
            "description": "Check in a vehicle and assign a parking spot"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Vehicle checked in successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.equal(true);",
                  "    pm.expect(jsonData).to.have.property('spotId');",
                  "    pm.expect(jsonData).to.have.property('checkInTime');",
                  "    ",
                  "    // Store spotId for other tests",
                  "    pm.collectionVariables.set('assignedSpotId', jsonData.spotId);",
                  "});",
                  "",
                  "pm.test('Spot assignment is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.spotId).to.match(/^F\\d+-B\\d+-S\\d{3}$/);",
                  "    pm.expect(jsonData.location).to.have.property('floor');",
                  "    pm.expect(jsonData.location).to.have.property('bay');",
                  "    pm.expect(jsonData.location).to.have.property('spot');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Simulate Check-in",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licensePlate\": \"SIM123\",\n  \"vehicleType\": \"compact\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkin/simulate",
              "host": ["{{baseUrl}}"],
              "path": ["checkin", "simulate"]
            },
            "description": "Preview check-in without actually performing it"
          },
          "response": []
        },
        {
          "name": "Check Parking Availability",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/checkin/availability",
              "host": ["{{baseUrl}}"],
              "path": ["checkin", "availability"]
            },
            "description": "Check current parking availability across all vehicle types"
          },
          "response": []
        },
        {
          "name": "Check Availability for Vehicle Type",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/checkin/availability/standard",
              "host": ["{{baseUrl}}"],
              "path": ["checkin", "availability", "standard"]
            },
            "description": "Check availability for a specific vehicle type"
          },
          "response": []
        },
        {
          "name": "Check-out Vehicle",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licensePlate\": \"{{licensePlate}}\",\n  \"paymentMethod\": \"credit_card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout",
              "host": ["{{baseUrl}}"],
              "path": ["checkout"]
            },
            "description": "Check out a vehicle and process payment"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Vehicle checked out successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.equal(true);",
                  "    pm.expect(jsonData).to.have.property('billing');",
                  "    pm.expect(jsonData.billing.totalAmount).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Billing details are present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const billing = jsonData.billing;",
                  "    pm.expect(billing).to.have.property('baseRate');",
                  "    pm.expect(billing).to.have.property('billableHours');",
                  "    pm.expect(billing).to.have.property('totalAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Simulate Checkout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licensePlate\": \"SIM123\",\n  \"checkOutTime\": \"2024-01-15T12:00:00.000Z\",\n  \"applyGracePeriod\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/simulate",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "simulate"]
            },
            "description": "Preview checkout fees without actually processing"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Spot Management",
      "description": "Parking spot management and query endpoints",
      "item": [
        {
          "name": "Get All Spots",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/spots?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["spots"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Items per page"
                },
                {
                  "key": "floor",
                  "value": "",
                  "description": "Filter by floor",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "",
                  "description": "Filter by spot type",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by availability",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve all parking spots with optional filtering and pagination"
          },
          "response": []
        },
        {
          "name": "Get Spot by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/spots/{{spotId}}",
              "host": ["{{baseUrl}}"],
              "path": ["spots", "{{spotId}}"]
            },
            "description": "Retrieve details for a specific parking spot"
          },
          "response": []
        },
        {
          "name": "Get Available Spots",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/spots/available?vehicleType=standard",
              "host": ["{{baseUrl}}"],
              "path": ["spots", "available"],
              "query": [
                {
                  "key": "vehicleType",
                  "value": "standard",
                  "description": "Filter by compatible vehicle type"
                }
              ]
            },
            "description": "Retrieve all currently available parking spots"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Vehicle Management",
      "description": "Vehicle tracking and management endpoints",
      "item": [
        {
          "name": "Get All Vehicles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/vehicles?status=parked&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles"],
              "query": [
                {
                  "key": "status",
                  "value": "parked",
                  "description": "Filter by parking status"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Items per page"
                },
                {
                  "key": "vehicleType",
                  "value": "",
                  "description": "Filter by vehicle type",
                  "disabled": true
                },
                {
                  "key": "floor",
                  "value": "",
                  "description": "Filter by floor",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve all parked vehicles with optional filtering"
          },
          "response": []
        },
        {
          "name": "Get Vehicle by License Plate",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{licensePlate}}",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{licensePlate}}"]
            },
            "description": "Retrieve details for a specific vehicle"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Analytics",
      "description": "Statistics and analytics endpoints",
      "item": [
        {
          "name": "Get System Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["stats"]
            },
            "description": "Retrieve comprehensive system usage and occupancy statistics"
          },
          "response": []
        },
        {
          "name": "Get Check-in Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/checkin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["checkin", "stats"]
            },
            "description": "Retrieve comprehensive check-in and occupancy statistics"
          },
          "response": []
        },
        {
          "name": "Get Occupancy Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stats/occupancy?groupBy=floor",
              "host": ["{{baseUrl}}"],
              "path": ["stats", "occupancy"],
              "query": [
                {
                  "key": "groupBy",
                  "value": "floor",
                  "description": "Group by dimension (floor, type, feature)"
                }
              ]
            },
            "description": "Get detailed occupancy statistics grouped by various dimensions"
          },
          "response": []
        },
        {
          "name": "Get Revenue Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stats/revenue?period=today",
              "host": ["{{baseUrl}}"],
              "path": ["stats", "revenue"],
              "query": [
                {
                  "key": "period",
                  "value": "today",
                  "description": "Time period (today, week, month)"
                }
              ]
            },
            "description": "Retrieve revenue and billing statistics for specified period"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Generate random license plate for testing",
          "const timestamp = Date.now().toString().slice(-6);",
          "const randomPlate = 'TEST' + timestamp;",
          "pm.collectionVariables.set('licensePlate', randomPlate);",
          "",
          "// Set default spot ID if not already set",
          "if (!pm.collectionVariables.get('spotId')) {",
          "    pm.collectionVariables.set('spotId', 'F1-B1-S001');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "licensePlate",
      "value": "TEST123",
      "type": "string"
    },
    {
      "key": "spotId",
      "value": "F1-B1-S001",
      "type": "string"
    },
    {
      "key": "assignedSpotId",
      "value": "",
      "type": "string"
    }
  ]
}