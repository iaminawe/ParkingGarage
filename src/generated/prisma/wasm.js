
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.GarageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  totalFloors: 'totalFloors',
  totalSpots: 'totalSpots',
  isActive: 'isActive',
  operatingHours: 'operatingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FloorScalarFieldEnum = {
  id: 'id',
  garageId: 'garageId',
  number: 'number',
  name: 'name',
  bays: 'bays',
  spotsPerBay: 'spotsPerBay',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SpotScalarFieldEnum = {
  id: 'id',
  garageId: 'garageId',
  floorId: 'floorId',
  floor: 'floor',
  bay: 'bay',
  spotNumber: 'spotNumber',
  type: 'type',
  status: 'status',
  features: 'features',
  currentVehicleId: 'currentVehicleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  licensePlate: 'licensePlate',
  vehicleType: 'vehicleType',
  make: 'make',
  model: 'model',
  color: 'color',
  year: 'year',
  ownerName: 'ownerName',
  ownerEmail: 'ownerEmail',
  ownerPhone: 'ownerPhone',
  status: 'status',
  currentSpotId: 'currentSpotId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ParkingSessionScalarFieldEnum = {
  id: 'id',
  garageId: 'garageId',
  spotId: 'spotId',
  vehicleId: 'vehicleId',
  status: 'status',
  rateType: 'rateType',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  expectedEndTime: 'expectedEndTime',
  durationMinutes: 'durationMinutes',
  hourlyRate: 'hourlyRate',
  totalAmount: 'totalAmount',
  isPaid: 'isPaid',
  notes: 'notes',
  metadata: 'metadata',
  endReason: 'endReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  garageId: 'garageId',
  vehicleId: 'vehicleId',
  sessionId: 'sessionId',
  ticketNumber: 'ticketNumber',
  type: 'type',
  status: 'status',
  description: 'description',
  violationTime: 'violationTime',
  location: 'location',
  fineAmount: 'fineAmount',
  isPaid: 'isPaid',
  paymentDueDate: 'paymentDueDate',
  issuedBy: 'issuedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  garageId: 'garageId',
  vehicleId: 'vehicleId',
  sessionId: 'sessionId',
  ticketId: 'ticketId',
  paymentNumber: 'paymentNumber',
  type: 'type',
  method: 'method',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  transactionId: 'transactionId',
  gatewayResponse: 'gatewayResponse',
  paymentDate: 'paymentDate',
  processedAt: 'processedAt',
  refundAmount: 'refundAmount',
  refundDate: 'refundDate',
  refundReason: 'refundReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SpotType = exports.$Enums.SpotType = {
  COMPACT: 'COMPACT',
  STANDARD: 'STANDARD',
  OVERSIZED: 'OVERSIZED',
  HANDICAP: 'HANDICAP',
  ELECTRIC: 'ELECTRIC',
  MOTORCYCLE: 'MOTORCYCLE'
};

exports.SpotStatus = exports.$Enums.SpotStatus = {
  AVAILABLE: 'AVAILABLE',
  OCCUPIED: 'OCCUPIED',
  RESERVED: 'RESERVED',
  OUT_OF_ORDER: 'OUT_OF_ORDER',
  MAINTENANCE: 'MAINTENANCE'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  COMPACT: 'COMPACT',
  STANDARD: 'STANDARD',
  OVERSIZED: 'OVERSIZED',
  MOTORCYCLE: 'MOTORCYCLE',
  TRUCK: 'TRUCK',
  BUS: 'BUS'
};

exports.VehicleStatus = exports.$Enums.VehicleStatus = {
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED',
  BANNED: 'BANNED',
  INACTIVE: 'INACTIVE'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  ABANDONED: 'ABANDONED'
};

exports.RateType = exports.$Enums.RateType = {
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  FLAT_RATE: 'FLAT_RATE'
};

exports.TicketType = exports.$Enums.TicketType = {
  OVERSTAY: 'OVERSTAY',
  NO_PAYMENT: 'NO_PAYMENT',
  EXPIRED_METER: 'EXPIRED_METER',
  INVALID_SPOT: 'INVALID_SPOT',
  HANDICAP_VIOLATION: 'HANDICAP_VIOLATION',
  BLOCKING: 'BLOCKING',
  OTHER: 'OTHER'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  ISSUED: 'ISSUED',
  PAID: 'PAID',
  DISPUTED: 'DISPUTED',
  DISMISSED: 'DISMISSED',
  OVERDUE: 'OVERDUE'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  PARKING: 'PARKING',
  FINE: 'FINE',
  DEPOSIT: 'DEPOSIT',
  REFUND: 'REFUND'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  DISPUTED: 'DISPUTED'
};

exports.Prisma.ModelName = {
  Garage: 'Garage',
  Floor: 'Floor',
  Spot: 'Spot',
  Vehicle: 'Vehicle',
  ParkingSession: 'ParkingSession',
  Ticket: 'Ticket',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
