openapi: 3.0.3
info:
  title: Parking Garage Management API
  description: |
    RESTful API for managing parking garage operations including vehicle check-in/out, 
    spot management, and garage configuration.
  version: 1.0.0
  contact:
    name: API Support
    email: support@parkinggarage.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: http://localhost:3000/api/v1
    description: Future versioned API endpoint

tags:
  - name: Garage
    description: Garage configuration and management
  - name: Spots
    description: Parking spot operations
  - name: Check-in
    description: Vehicle check-in operations
  - name: Checkout
    description: Vehicle checkout operations
  - name: Vehicles
    description: Vehicle management operations
  - name: Statistics
    description: Analytics and statistics
  - name: Health
    description: Health check and monitoring endpoints
  - name: Monitoring
    description: Application performance and metrics endpoints

paths:
  /garage:
    get:
      tags:
        - Garage
      summary: Get garage configuration
      description: Retrieve current garage configuration including floors, bays, and spots
      operationId: getGarageConfig
      parameters:
        - name: includeStats
          in: query
          description: Include statistics in response
          required: false
          schema:
            type: boolean
            default: false
        - name: includeSpots
          in: query
          description: Include spot details in response
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Garage configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageConfiguration'
        '404':
          description: Garage not initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /garage/initialize:
    post:
      tags:
        - Garage
      summary: Initialize garage
      description: Initialize a new parking garage with floors and spots
      operationId: initializeGarage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GarageInitializationRequest'
      responses:
        '201':
          description: Garage initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageConfiguration'
        '400':
          description: Invalid initialization data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Garage already initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /garage/rates:
    get:
      tags:
        - Garage
      summary: Get current parking rates
      description: Retrieve current parking rates for all vehicle types
      operationId: getRates
      responses:
        '200':
          description: Rates retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatesResponse'
        '404':
          description: Garage not initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Garage
      summary: Update parking rates
      description: Update parking rates for different vehicle types
      operationId: updateRates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatesUpdateRequest'
      responses:
        '200':
          description: Rates updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatesResponse'
        '400':
          description: Invalid rate data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Garage not initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /garage/statistics:
    get:
      tags:
        - Garage
      summary: Get garage statistics
      description: Retrieve detailed statistics about garage usage
      operationId: getStatistics
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
        '404':
          description: Garage not initialized

  /garage/status:
    get:
      tags:
        - Garage
      summary: Get garage status
      description: Retrieve current operational status of the garage
      operationId: getStatus
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /garage/capacity:
    get:
      tags:
        - Garage
      summary: Get capacity information
      description: Retrieve current capacity and availability
      operationId: getCapacity
      responses:
        '200':
          description: Capacity information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapacityResponse'

  /garage/reset:
    delete:
      tags:
        - Garage
      summary: Reset garage (Development only)
      description: Reset entire garage to initial state. Only available in development mode.
      operationId: resetGarage
      responses:
        '200':
          description: Garage reset successfully
        '403':
          description: Operation not allowed in production

  /spots:
    get:
      tags:
        - Spots
      summary: List parking spots
      description: Retrieve list of parking spots with filtering and pagination
      operationId: listSpots
      parameters:
        - name: status
          in: query
          description: Filter by spot status
          required: false
          schema:
            type: string
            enum: [available, occupied]
        - name: type
          in: query
          description: Filter by spot type
          required: false
          schema:
            type: string
            enum: [compact, standard, oversized]
        - name: floor
          in: query
          description: Filter by floor number
          required: false
          schema:
            type: integer
            minimum: 1
        - name: bay
          in: query
          description: Filter by bay number
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Maximum number of spots to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of spots to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [id, floor, bay, type, status, updatedAt]
            default: id
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: include
          in: query
          description: Additional data to include (comma-separated)
          required: false
          schema:
            type: string
            example: metadata,features,occupancy
      responses:
        '200':
          description: Spots retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsListResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /spots/statistics:
    get:
      tags:
        - Spots
      summary: Get spot statistics
      description: Retrieve statistics about parking spot usage
      operationId: getSpotStatistics
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotStatisticsResponse'

  /spots/available:
    get:
      tags:
        - Spots
      summary: Get available spots
      description: Retrieve only available parking spots
      operationId: getAvailableSpots
      parameters:
        - name: type
          in: query
          description: Filter by spot type
          required: false
          schema:
            type: string
            enum: [compact, standard, oversized]
      responses:
        '200':
          description: Available spots retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsListResponse'

  /spots/occupied:
    get:
      tags:
        - Spots
      summary: Get occupied spots
      description: Retrieve only occupied parking spots
      operationId: getOccupiedSpots
      responses:
        '200':
          description: Occupied spots retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsListResponse'

  /spots/{spotId}:
    get:
      tags:
        - Spots
      summary: Get spot by ID
      description: Retrieve details of a specific parking spot
      operationId: getSpotById
      parameters:
        - name: spotId
          in: path
          description: Spot ID in format F{floor}-B{bay}-S{spot}
          required: true
          schema:
            type: string
            pattern: '^F\d+-B\d+-S\d{3}$'
            example: F1-B2-S003
      responses:
        '200':
          description: Spot details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotDetails'
        '400':
          description: Invalid spot ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Spot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    patch:
      tags:
        - Spots
      summary: Update spot
      description: Update spot status, type, or features
      operationId: updateSpot
      parameters:
        - name: spotId
          in: path
          description: Spot ID in format F{floor}-B{bay}-S{spot}
          required: true
          schema:
            type: string
            pattern: '^F\d+-B\d+-S\d{3}$'
            example: F1-B2-S003
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotUpdateRequest'
      responses:
        '200':
          description: Spot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotDetails'
        '400':
          description: Invalid update data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Spot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checkin:
    post:
      tags:
        - Check-in
      summary: Check in vehicle
      description: Check in a vehicle and assign a parking spot
      operationId: checkinVehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckinRequest'
      responses:
        '201':
          description: Vehicle checked in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckinResponse'
        '400':
          description: Invalid check-in data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No available spots for vehicle type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Vehicle already checked in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checkin/simulate:
    post:
      tags:
        - Check-in
      summary: Simulate check-in
      description: Simulate a check-in without actually reserving a spot
      operationId: simulateCheckin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckinRequest'
      responses:
        '200':
          description: Simulation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationResponse'
        '400':
          description: Invalid simulation data

  /checkin/availability:
    get:
      tags:
        - Check-in
      summary: Get general availability
      description: Get availability information for all vehicle types
      operationId: getAvailability
      responses:
        '200':
          description: Availability information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityResponse'

  /checkin/availability/{vehicleType}:
    get:
      tags:
        - Check-in
      summary: Get availability by vehicle type
      description: Get availability for specific vehicle type
      operationId: getAvailabilityByType
      parameters:
        - name: vehicleType
          in: path
          description: Type of vehicle
          required: true
          schema:
            type: string
            enum: [compact, standard, oversized]
      responses:
        '200':
          description: Availability information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeAvailabilityResponse'
        '400':
          description: Invalid vehicle type

  /checkin/stats:
    get:
      tags:
        - Check-in
      summary: Get check-in statistics
      description: Retrieve statistics about check-in operations
      operationId: getCheckinStats
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckinStatsResponse'

  /checkout:
    post:
      tags:
        - Checkout
      summary: Check out vehicle
      description: Check out a vehicle from the garage
      operationId: checkoutVehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '200':
          description: Vehicle checked out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '400':
          description: Invalid checkout data
        '404':
          description: Vehicle not found

  /checkout/simulate:
    post:
      tags:
        - Checkout
      summary: Simulate checkout
      description: Simulate checkout without actually performing it
      operationId: simulateCheckout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '200':
          description: Simulation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSimulationResponse'

  /checkout/estimate/{licensePlate}:
    get:
      tags:
        - Checkout
      summary: Get current cost estimate
      description: Get current parking cost estimate for a vehicle
      operationId: getCurrentEstimate
      parameters:
        - name: licensePlate
          in: path
          required: true
          schema:
            type: string
          description: Vehicle license plate
      responses:
        '200':
          description: Estimate retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutEstimateResponse'

  /checkout/ready:
    get:
      tags:
        - Checkout
      summary: Get vehicles ready for checkout
      description: Get vehicles that are ready for checkout
      operationId: getVehiclesReadyForCheckout
      parameters:
        - name: minMinutes
          in: query
          schema:
            type: integer
            minimum: 0
          description: Minimum parking time in minutes
        - name: vehicleType
          in: query
          schema:
            type: string
            enum: [compact, standard, oversized]
          description: Filter by vehicle type
      responses:
        '200':
          description: Ready vehicles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutReadyResponse'

  /checkout/stats:
    get:
      tags:
        - Checkout
      summary: Get checkout statistics
      description: Get checkout statistics and revenue metrics
      operationId: getCheckoutStats
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutStatsResponse'

  /checkout/force:
    post:
      tags:
        - Checkout
      summary: Force checkout (Admin)
      description: Force checkout for administrative purposes
      operationId: forceCheckout
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForceCheckoutRequest'
      responses:
        '200':
          description: Force checkout completed
        '401':
          description: Admin authentication required

  /vehicles:
    get:
      tags:
        - Vehicles
      summary: Get all vehicles
      description: Get all vehicles with pagination and filtering
      operationId: getAllVehicles
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search term for license plate
      responses:
        '200':
          description: Vehicles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiclesListResponse'

    post:
      tags:
        - Vehicles
      summary: Create vehicle
      description: Create a new vehicle record
      operationId: createVehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleCreateRequest'
      responses:
        '201':
          description: Vehicle created successfully
        '400':
          description: Invalid vehicle data

  /vehicles/{id}:
    get:
      tags:
        - Vehicles
      summary: Get vehicle by ID
      description: Get a specific vehicle by ID (license plate)
      operationId: getVehicleById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Vehicle ID (license plate)
      responses:
        '200':
          description: Vehicle retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDetailsResponse'
        '404':
          description: Vehicle not found

    put:
      tags:
        - Vehicles
      summary: Update vehicle
      description: Update a vehicle
      operationId: updateVehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Vehicle ID (license plate)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleUpdateRequest'
      responses:
        '200':
          description: Vehicle updated successfully

    delete:
      tags:
        - Vehicles
      summary: Delete vehicle
      description: Delete a vehicle
      operationId: deleteVehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Vehicle ID (license plate)
      responses:
        '200':
          description: Vehicle deleted successfully

  /vehicles/metrics:
    get:
      tags:
        - Vehicles
      summary: Get vehicle metrics
      description: Get vehicle metrics and statistics
      operationId: getVehicleMetrics
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleMetricsResponse'

  /vehicles/bulk-delete:
    post:
      tags:
        - Vehicles
      summary: Bulk delete vehicles
      description: Bulk delete vehicles
      operationId: bulkDeleteVehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteRequest'
      responses:
        '200':
          description: Vehicles deleted successfully

  /vehicles/search:
    get:
      tags:
        - Vehicles
      summary: Search vehicles
      description: Search vehicles by license plate (legacy search functionality)
      operationId: searchVehicles
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
          description: Search term for license plate
        - name: mode
          in: query
          schema:
            type: string
            enum: [exact, partial, fuzzy, all]
            default: partial
          description: Search mode
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleSearchResponse'

  /stats:
    get:
      tags:
        - Statistics
      summary: Get comprehensive garage statistics
      description: Get comprehensive garage statistics
      operationId: getGarageStats
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageStatsResponse'

  /stats/occupancy:
    get:
      tags:
        - Statistics
      summary: Get occupancy summary
      description: Get real-time occupancy summary
      operationId: getOccupancySummary
      responses:
        '200':
          description: Occupancy summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccupancySummaryResponse'

  /stats/dashboard:
    get:
      tags:
        - Statistics
      summary: Get dashboard statistics
      description: Get dashboard summary with key metrics
      operationId: getDashboardStats
      responses:
        '200':
          description: Dashboard statistics retrieved successfully

  /stats/trends:
    get:
      tags:
        - Statistics
      summary: Get occupancy trends
      description: Get occupancy trends over time
      operationId: getOccupancyTrends
      parameters:
        - name: hours
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 168
            default: 24
          description: Hours to analyze (1-168, max 1 week)
      responses:
        '200':
          description: Trends retrieved successfully

  /stats/revenue:
    get:
      tags:
        - Statistics
      summary: Get revenue analytics
      description: Get revenue analytics
      operationId: getRevenueAnalytics
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 7
          description: Days to analyze (1-365, max 1 year)
      responses:
        '200':
          description: Revenue analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueAnalyticsResponse'

  /stats/usage:
    get:
      tags:
        - Statistics
      summary: Get usage patterns
      description: Get usage patterns and peak times
      operationId: getUsagePatterns
      responses:
        '200':
          description: Usage patterns retrieved successfully

  /stats/compare:
    get:
      tags:
        - Statistics
      summary: Get comparative statistics
      description: Get comparative statistics (current vs previous period)
      operationId: getComparativeStats
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Period to compare
      responses:
        '200':
          description: Comparative statistics retrieved successfully

  /stats/export:
    get:
      tags:
        - Statistics
      summary: Export statistics data
      description: Export statistics data
      operationId: exportStats
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [garage, revenue, usage]
            default: garage
          description: Data type to export
        - name: format
          in: query
          schema:
            type: string
            enum: [json]
            default: json
          description: Export format
      responses:
        '200':
          description: Statistics data exported successfully

  /stats/floor/{id}:
    get:
      tags:
        - Statistics
      summary: Get floor-specific statistics
      description: Get floor-specific statistics
      operationId: getFloorStats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Floor number
      responses:
        '200':
          description: Floor statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorStatsResponse'

  /health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: Check if the API server is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnhealthyResponse'

  /health/detailed:
    get:
      tags:
        - Health
      summary: Detailed health check
      description: Get comprehensive health information including system metrics and dependency status
      operationId: detailedHealthCheck
      responses:
        '200':
          description: Detailed health information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '503':
          description: System unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnhealthyResponse'

  /health/ready:
    get:
      tags:
        - Health
      summary: Readiness probe
      description: Check if the application is ready to receive traffic (for Kubernetes readiness probe)
      operationId: readinessCheck
      responses:
        '200':
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
        '503':
          description: Application not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'

  /health/live:
    get:
      tags:
        - Health
      summary: Liveness probe
      description: Check if the application is alive (for Kubernetes liveness probe)
      operationId: livenessCheck
      responses:
        '200':
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'
        '503':
          description: Application should be restarted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'

  /health/metrics:
    get:
      tags:
        - Monitoring
      summary: Application metrics
      description: Get application metrics in Prometheus format for scraping
      operationId: getMetrics
      produces:
        - text/plain
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Metrics in Prometheus format
        '500':
          description: Error retrieving metrics

  /health/debug:
    get:
      tags:
        - Monitoring
      summary: Debug information
      description: Get debug information (development only)
      operationId: getDebugInfo
      responses:
        '200':
          description: Debug information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugResponse'
        '404':
          description: Debug endpoint not available in production

components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - success
        - message
        - timestamp
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
          description: Error message
        errors:
          type: array
          items:
            type: string
          description: Detailed error messages
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error

    GarageConfiguration:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          default: true
        data:
          type: object
          properties:
            name:
              type: string
              description: Garage name
            floors:
              type: array
              items:
                $ref: '#/components/schemas/FloorConfiguration'
            totalSpots:
              type: integer
              description: Total number of spots
            availableSpots:
              type: integer
              description: Number of available spots
            occupiedSpots:
              type: integer
              description: Number of occupied spots
            statistics:
              $ref: '#/components/schemas/StatisticsResponse'
            spots:
              type: array
              items:
                $ref: '#/components/schemas/SpotDetails'

    FloorConfiguration:
      type: object
      required:
        - number
        - bays
        - spotsPerBay
      properties:
        number:
          type: integer
          minimum: 1
          description: Floor number
        bays:
          type: integer
          minimum: 1
          maximum: 50
          description: Number of bays on floor
        spotsPerBay:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of spots per bay
        totalSpots:
          type: integer
          description: Total spots on floor

    GarageInitializationRequest:
      type: object
      required:
        - name
        - floors
      properties:
        name:
          type: string
          minLength: 1
          description: Garage name
        floors:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - number
              - bays
              - spotsPerBay
            properties:
              number:
                type: integer
                minimum: 1
                description: Floor number
              bays:
                type: integer
                minimum: 1
                maximum: 50
                description: Number of bays
              spotsPerBay:
                type: integer
                minimum: 1
                maximum: 100
                description: Spots per bay

    RatesResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            standard:
              type: number
              minimum: 0
              maximum: 1000
              description: Standard vehicle rate per hour
            compact:
              type: number
              minimum: 0
              maximum: 1000
              description: Compact vehicle rate per hour
            oversized:
              type: number
              minimum: 0
              maximum: 1000
              description: Oversized vehicle rate per hour
            ev_charging:
              type: number
              minimum: 0
              maximum: 1000
              description: EV charging rate per hour

    RatesUpdateRequest:
      type: object
      properties:
        standard:
          type: number
          minimum: 0
          maximum: 1000
        compact:
          type: number
          minimum: 0
          maximum: 1000
        oversized:
          type: number
          minimum: 0
          maximum: 1000
        ev_charging:
          type: number
          minimum: 0
          maximum: 1000

    StatisticsResponse:
      type: object
      properties:
        totalSpots:
          type: integer
        occupancyRate:
          type: number
          format: float
        availableByType:
          type: object
          properties:
            compact:
              type: integer
            standard:
              type: integer
            oversized:
              type: integer
        occupiedByType:
          type: object
          properties:
            compact:
              type: integer
            standard:
              type: integer
            oversized:
              type: integer
        revenueToday:
          type: number
          format: float
        checkinsToday:
          type: integer

    StatusResponse:
      type: object
      properties:
        operational:
          type: boolean
        maintenanceMode:
          type: boolean
        lastUpdated:
          type: string
          format: date-time

    CapacityResponse:
      type: object
      properties:
        totalCapacity:
          type: integer
        currentOccupancy:
          type: integer
        availableCapacity:
          type: integer
        percentageFull:
          type: number
          format: float

    SpotsListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/SpotDetails'
        metadata:
          type: object
          properties:
            total:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
            hasMore:
              type: boolean

    SpotDetails:
      type: object
      properties:
        id:
          type: string
          pattern: '^F\d+-B\d+-S\d{3}$'
          example: F1-B2-S003
        floor:
          type: integer
        bay:
          type: integer
        number:
          type: integer
        type:
          type: string
          enum: [compact, standard, oversized]
        status:
          type: string
          enum: [available, occupied]
        features:
          type: array
          items:
            type: string
            enum: [ev_charging, handicap]
        occupancy:
          type: object
          properties:
            vehicleId:
              type: string
            licensePlate:
              type: string
            checkinTime:
              type: string
              format: date-time
            duration:
              type: string
        updatedAt:
          type: string
          format: date-time

    SpotUpdateRequest:
      type: object
      properties:
        status:
          type: string
          enum: [available, occupied]
        type:
          type: string
          enum: [compact, standard, oversized]
        features:
          type: array
          items:
            type: string
            enum: [ev_charging, handicap]

    SpotStatisticsResponse:
      type: object
      properties:
        total:
          type: integer
        byStatus:
          type: object
          properties:
            available:
              type: integer
            occupied:
              type: integer
        byType:
          type: object
          properties:
            compact:
              type: integer
            standard:
              type: integer
            oversized:
              type: integer
        byFloor:
          type: array
          items:
            type: object
            properties:
              floor:
                type: integer
              available:
                type: integer
              occupied:
                type: integer

    CheckinRequest:
      type: object
      required:
        - licensePlate
        - vehicleType
      properties:
        licensePlate:
          type: string
          minLength: 2
          maxLength: 10
          description: Vehicle license plate
        vehicleType:
          type: string
          enum: [compact, standard, oversized]
          description: Type of vehicle
        rateType:
          type: string
          enum: [hourly, daily, monthly]
          description: Rate type (optional)

    CheckinResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            ticketId:
              type: string
              description: Unique ticket identifier
            spotId:
              type: string
              description: Assigned spot ID
            licensePlate:
              type: string
            vehicleType:
              type: string
            checkinTime:
              type: string
              format: date-time
            rate:
              type: number
              description: Hourly rate
            location:
              type: object
              properties:
                floor:
                  type: integer
                bay:
                  type: integer
                spot:
                  type: integer

    SimulationResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            availableSpots:
              type: integer
            estimatedSpotId:
              type: string
            rate:
              type: number
            message:
              type: string

    AvailabilityResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            totalAvailable:
              type: integer
            byType:
              type: object
              properties:
                compact:
                  type: integer
                standard:
                  type: integer
                oversized:
                  type: integer

    TypeAvailabilityResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            vehicleType:
              type: string
            available:
              type: integer
            total:
              type: integer
            locations:
              type: array
              items:
                type: object
                properties:
                  spotId:
                    type: string
                  floor:
                    type: integer
                  bay:
                    type: integer

    CheckinStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            todayCheckins:
              type: integer
            activeCheckins:
              type: integer
            averageDuration:
              type: number
            peakHour:
              type: string
            revenueToday:
              type: number

    CheckoutRequest:
      type: object
      required:
        - licensePlate
      properties:
        licensePlate:
          type: string
          minLength: 2
          maxLength: 10
          description: Vehicle license plate
        applyGracePeriod:
          type: boolean
          default: true
          description: Apply grace period to reduce charges
        removeRecord:
          type: boolean
          default: false
          description: Remove vehicle record after checkout
        checkOutTime:
          type: string
          format: date-time
          description: Custom checkout time (optional, defaults to current time)

    CheckoutResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            licensePlate:
              type: string
            spotId:
              type: string
            timing:
              type: object
              properties:
                checkinTime:
                  type: string
                  format: date-time
                checkoutTime:
                  type: string
                  format: date-time
                duration:
                  type: string
                durationMinutes:
                  type: integer
            billing:
              type: object
              properties:
                rate:
                  type: number
                totalCost:
                  type: number
                gracePeriodApplied:
                  type: boolean
                breakdown:
                  type: object
                  properties:
                    baseTime:
                      type: integer
                    gracePeriod:
                      type: integer
                    billableTime:
                      type: integer
        timestamp:
          type: string
          format: date-time

    CheckoutSimulationResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            simulation:
              type: object
              properties:
                estimatedCost:
                  type: number
                duration:
                  type: string
                rate:
                  type: number
                gracePeriodSavings:
                  type: number

    CheckoutEstimateResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            licensePlate:
              type: string
            estimate:
              type: object
              properties:
                currentDuration:
                  type: string
                estimatedCost:
                  type: number
                rate:
                  type: number
                projectedCost:
                  type: object
                  properties:
                    nextHour:
                      type: number
                    endOfDay:
                      type: number

    CheckoutReadyResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            count:
              type: integer
            vehicles:
              type: array
              items:
                type: object
                properties:
                  licensePlate:
                    type: string
                  spotId:
                    type: string
                  checkinTime:
                    type: string
                    format: date-time
                  duration:
                    type: string
                  estimatedCost:
                    type: number

    CheckoutStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            statistics:
              type: object
              properties:
                todayCheckouts:
                  type: integer
                totalRevenue:
                  type: number
                averageSession:
                  type: string
                peakCheckoutHour:
                  type: string

    ForceCheckoutRequest:
      type: object
      required:
        - licensePlate
        - reason
        - adminKey
      properties:
        licensePlate:
          type: string
          description: Vehicle license plate
        reason:
          type: string
          description: Reason for forced checkout
        adminKey:
          type: string
          description: Admin authentication key

    VehiclesListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            vehicles:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  licensePlate:
                    type: string
                  vehicleType:
                    type: string
                    enum: [compact, standard, oversized]
                  checkinTime:
                    type: string
                    format: date-time
                  spotId:
                    type: string
                  status:
                    type: string
                    enum: [checked_in, checked_out]
            pagination:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                total:
                  type: integer
                pages:
                  type: integer

    VehicleCreateRequest:
      type: object
      required:
        - licensePlate
        - vehicleType
      properties:
        licensePlate:
          type: string
          minLength: 2
          maxLength: 10
        vehicleType:
          type: string
          enum: [compact, standard, oversized]
        rateType:
          type: string
          enum: [hourly, daily, monthly]
          default: hourly

    VehicleDetailsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            id:
              type: string
            licensePlate:
              type: string
            vehicleType:
              type: string
            checkinTime:
              type: string
              format: date-time
            spotId:
              type: string
            status:
              type: string
            rateType:
              type: string
            currentCost:
              type: number

    VehicleUpdateRequest:
      type: object
      properties:
        vehicleType:
          type: string
          enum: [compact, standard, oversized]
        rateType:
          type: string
          enum: [hourly, daily, monthly]

    VehicleMetricsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            totalVehicles:
              type: integer
            byType:
              type: object
              properties:
                compact:
                  type: integer
                standard:
                  type: integer
                oversized:
                  type: integer
            averageSessionTime:
              type: string
            totalRevenue:
              type: number

    BulkDeleteRequest:
      type: object
      required:
        - vehicleIds
      properties:
        vehicleIds:
          type: array
          items:
            type: string
          minItems: 1

    VehicleSearchResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            results:
              type: array
              items:
                type: object
                properties:
                  licensePlate:
                    type: string
                  vehicleType:
                    type: string
                  spotId:
                    type: string
                  matchScore:
                    type: number
            totalMatches:
              type: integer

    GarageStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            garage:
              type: object
              properties:
                totalSpots:
                  type: integer
                occupiedSpots:
                  type: integer
                availableSpots:
                  type: integer
                occupancyRate:
                  type: number
            revenue:
              type: object
              properties:
                today:
                  type: number
                thisWeek:
                  type: number
                thisMonth:
                  type: number
            vehicles:
              type: object
              properties:
                checkedIn:
                  type: integer
                checkedOut:
                  type: integer

    OccupancySummaryResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            currentOccupancy:
              type: integer
            capacity:
              type: integer
            occupancyRate:
              type: number
            byFloor:
              type: array
              items:
                type: object
                properties:
                  floor:
                    type: integer
                  occupied:
                    type: integer
                  capacity:
                    type: integer
                  rate:
                    type: number
            byType:
              type: object
              properties:
                compact:
                  type: object
                  properties:
                    occupied:
                      type: integer
                    capacity:
                      type: integer
                    rate:
                      type: number
                standard:
                  type: object
                  properties:
                    occupied:
                      type: integer
                    capacity:
                      type: integer
                    rate:
                      type: number
                oversized:
                  type: object
                  properties:
                    occupied:
                      type: integer
                    capacity:
                      type: integer
                    rate:
                      type: number

    RevenueAnalyticsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            totalRevenue:
              type: number
            dailyAverage:
              type: number
            byVehicleType:
              type: object
              properties:
                compact:
                  type: number
                standard:
                  type: number
                oversized:
                  type: number
            trends:
              type: object
              properties:
                direction:
                  type: string
                  enum: [increasing, decreasing, stable]
                changePercent:
                  type: number

    FloorStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            floor:
              type: integer
            totalSpots:
              type: integer
            occupiedSpots:
              type: integer
            availableSpots:
              type: integer
            occupancyRate:
              type: number
            revenue:
              type: object
              properties:
                today:
                  type: number
                average:
                  type: number

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - uptime
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall health status
        timestamp:
          type: string
          format: date-time
          description: Timestamp of health check
        uptime:
          type: number
          description: Server uptime in seconds
        environment:
          type: string
          description: Runtime environment
        version:
          type: string
          description: API version
        duration:
          type: number
          description: Health check duration in milliseconds

    UnhealthyResponse:
      type: object
      required:
        - status
        - timestamp
        - error
      properties:
        status:
          type: string
          enum: [unhealthy]
        timestamp:
          type: string
          format: date-time
        error:
          type: string
          description: Error message
        duration:
          type: number
          description: Health check duration in milliseconds

    DetailedHealthResponse:
      type: object
      required:
        - status
        - timestamp
        - checks
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Server uptime in seconds
        version:
          type: string
        environment:
          type: string
        duration:
          type: number
        checks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Check name
              status:
                type: string
                enum: [healthy, degraded, unhealthy]
              message:
                type: string
                description: Check result message
              duration:
                type: number
                description: Check duration in milliseconds
              metadata:
                type: object
                description: Additional check metadata
        system:
          type: object
          properties:
            memory:
              type: object
              properties:
                used:
                  type: number
                  description: Used memory in MB
                total:
                  type: number
                  description: Total memory in MB
                external:
                  type: number
                  description: External memory in MB
                rss:
                  type: number
                  description: RSS memory in MB
            cpu:
              type: object
              properties:
                user:
                  type: number
                  description: User CPU time in microseconds
                system:
                  type: number
                  description: System CPU time in microseconds
            loadAverage:
              type: array
              items:
                type: number
              description: System load average
            platform:
              type: object
              properties:
                node:
                  type: string
                  description: Node.js version
                platform:
                  type: string
                  description: Operating system platform
                arch:
                  type: string
                  description: CPU architecture
        configuration:
          type: object
          properties:
            logLevel:
              type: string
            metricsEnabled:
              type: boolean
            sentryEnabled:
              type: boolean

    ReadinessResponse:
      type: object
      required:
        - ready
        - timestamp
      properties:
        ready:
          type: boolean
          description: Whether application is ready for traffic
        timestamp:
          type: string
          format: date-time
        duration:
          type: number
          description: Check duration in milliseconds
        checks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
                enum: [healthy, degraded, unhealthy]
              message:
                type: string
              duration:
                type: number

    LivenessResponse:
      type: object
      required:
        - alive
        - timestamp
      properties:
        alive:
          type: boolean
          description: Whether application is alive
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Server uptime in seconds
        duration:
          type: number
          description: Check duration in milliseconds
        memory:
          type: object
          properties:
            used:
              type: number
              description: Used memory in MB
            total:
              type: number
              description: Total memory in MB
            percent:
              type: number
              description: Memory usage percentage

    DebugResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        environment:
          type: string
        configuration:
          type: object
          description: Non-sensitive configuration values
        metrics:
          type: object
          properties:
            total:
              type: number
              description: Total metrics count
            recent:
              type: array
              items:
                type: object
              description: Recent metric entries
        process:
          type: object
          properties:
            pid:
              type: number
            version:
              type: string
            platform:
              type: string
            arch:
              type: string
            uptime:
              type: number
            memoryUsage:
              type: object
            cpuUsage:
              type: object
        request:
          type: object
          properties:
            correlationId:
              type: string
            method:
              type: string
            url:
              type: string
            headers:
              type: object

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (not yet implemented)

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (not yet implemented)